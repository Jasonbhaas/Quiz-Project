Welcome to Test Taker!
This app is designed to allow teachers to adminster tests to students online. In this readme, I will go over some basics of the Test Taker system.

==============================Models==============================
I have 7 different models. Users, Quiz, Question, Answer, Quiz_Attempt, Question_Attempt, and Answer_attempt. It works as follows. Only adminestrators can create Quizes. Each quiz can have many questions and each question can have many answers. When a studen "takes" a quiz, they are creating a quiz attempt. By default they are only allowed one quiz attempt. A Quiz attempt has many queston_attempts and a likewise a question_attempt has many answer attepts. Together, these make up one whole "taken test". A quiz attempt is created by default at the start of the test, and is only graded once it is submitted. Question attempts are also made automatically when a student first views the question. Answer attempts can be made and destroyed many times. When a student selects an answer, it saves an answer attempt. They can very easily "deselect" this answer, which destroys it. When the quiz is submitted, the program searches for all question attempts belonging to the quiz attempt, and then for all answer attempts matching the question attempt. It then tallies the scores, and it is recorded in the quiz attempt.

==============================Navigation==============================
A good place to get started on the navigation of this site is to look at the urls files. The urls have a few basic patterns. Those beginning with quiz are used by the administrator to create new quizzes, and require admin authentication to access. The only pages that do not require logging in are the sign in/up/out pages and the home page. All pages that begin with 'take' are used for the students to take quizes. urls with 'take_quiz' do not require a quiz_Attempt, while pages with 'take' preceded by the quiz id, do require a quiz_attempt.

 The flow of the website is different for students and administrators, but for both, you cannot do much without logging in except look at the home page. For an admin, they then go to the quiz/new page where they can see previously existing quizes, or create a new one. If the select one of the existing quizes, they will then see the list of questions. Again, they can either make a new question, or select one from which they will be directed to a page showing all answers for that question. On this page, they can add new answers.

For a student, the navigation goes as follows. After signing in, they go to the take_quiz page. From there, they select a quiz they want to take, and go to the confirmation page. This prevetns any accidents. The confirmation page then redirects to the first page of the quiz, the instructions, upon which the quiz_attepmt is created. They can then navigate forward and backward through the questons of the quiz, until they go to submit. Again, a confirmation page prevents accidents. Upon submitting, the quiz is no longer accessible and the scores are computed.


==============================Where to start==============================
If you are looking to understand the bulk of the code, the best place to look is in the views file. Here you will get a good glimpse of the different processes that occur before each page load. For making and writing a quiz, this code is used to make sure correct quizes are made, and to automatically record the user/ quiz/ question ids. These are on lines 23-82. Lines 85-118 are all concerned with users and managing user sessions. Lastly, lines 121-263 are used for recording a student as they take a quiz. The code in these must query the database to retrieve the quizes/questions/answers, ensure that the user has a quiz attempt/question attempt, and create/update quiz attempts/ question attemps/ answer attempts as the student takes the quiz.

If you have any further questions, comments or concerns, please email Jhaas@haverford.edu